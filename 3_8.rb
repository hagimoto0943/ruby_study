## 範囲

# 配列、ハッシュと、値の集合を表すリテラルを見てきました。これでRubyのキホ運的な値の操作が身につきました。
# 単純なプログラムであれば、ここまでの知識で対応できるでしょう。
# 応用的なリテラルである、範囲、正規表現、コマンド出力などを学びます。


# 範囲リテラル

1..5 # 1以上5以下
1...5 # 1以上5未満
'a'..'e' # 'a'以上'e'以下
'a'...'e' # 'a'以上'e'未満 

# include?メソッド
(1..5).include?(1) # => true
(1..5).include?(6) # => false
(1..5) == 3 # => false
(1..5) === 3 # => true
(1..5) === 9 # => false

# これらは範囲オブジェクトと呼ばれ、Rangeクラスのインスタンスとなります。
# 範囲オブジェクトは、include?メソッドをし使用して、引数で指定した値が範囲に含まれているかどうかを判定することができます。
# これは、===演算子でも同じ結果となります。
# 範囲オブジェクトでは、「==」は同値判定、「===」は包含判定となります。

# for文に範囲オブジェクトを適用
for i in 'a'..'z' do # iに'a'から'z'までの値が入る
  p i
end

# 範囲オブジェクトを配列の添字演算子に適用することで、その範囲の部分を中室するこpとができます。
# 先に述べたかんまによるy砲素数の指定との違いが重要なので、しっかりと区別するように。
# 添字演算子とは、配列やハッシュなどのコレクション型のデータに対して、特定の位置やキーにあるようにアクセスするための演算子です。
# 例えば、for文やeachなどがその例です。

# 配列の添字演算子に配列オブジェクトを適用

a = [1, 2, 3, 4, 5]
p a[2,3] # => [3, 4, 5]
p a[2..3] # => [3, 4]
p a[2...3] # => [3]

# 添字演算子は、数値を指定すると、その位置の文字列がかえります。範囲オブジェクトを指定すると、その部分を抽出した結果が帰ります。
# 範囲オブジェクトの動作は配列と同様なので、合わせて覚える。

# 文字列の添字演算子に範囲オブジェクトを適用
a= 'abcdef'
p a[1] # => "b"
p a[1..2] # => "bc"
p a[1...2] # => "b"


#case式
#他の言語のswitch文に相当するcase式は、Rubyではcase式として実装されています。

# case式で指定された式の評価値を、順位条件式と比較して、最初にマッチしたwhen節を実行して抜けます。
# 最後までマッチしなかった場合の処理は、else節に記述します。
# これらの節で最後に評価した式の結果が、case式の評価値となります。 

case 1
when 1 then
  p 1
end

case "abc"
when "abc"
  p1
when "abc"
  p2 # こちらは実行されない
end # => 1

a = 10 
b = case a 
when 1 then
  1 # 実行されない
else
  2
end

p b # => 2

# 条件式では、カンマで区切って複数の条件を指定できます。
# これはor条件となり、どれか一つにマッチするときに実行されます。

case 3
when 1,2 then: p 1
when 3,4 then: p 2 # これが実行される
else p 3
end # => 2

# これはでは漠然と「マッチした場合」と説明してきましたが、
# 具体的には、各条件式で指定された値の===演算子が、caseで指定された値を引数として実行されます。
# この===演算子は、基本的には同じ値かどうかを判定しますが、いくつかのクラスで上書きされており、
# Moduleクラスとそのサブクラスでは、指定オブジェクトのクラスがそのクラス、サブクラス、includeされたモジュールかどうかを判定します。
# Regexpクラスでは、指定オブジェクトが正規表現にマッチするかどう正規表現にマッチするかどうかを判定します。